spring:
  profiles:
    active: local
    group:
      local: local_server, common, secret
      prod: prod_server, common, secret
  config:
    import: >-
      optional:file:.env[.properties],
      optional:file:.env.local[.properties],
      optional:classpath:.env[.properties],
      optional:classpath:.env.local[.properties],
      optional:file:Happy100BE/.env[.properties],
      optional:file:.env.production[.properties],
      optional:file:Happy100BE/.env.production[.properties],
      optional:classpath:.env.production[.properties],
      optional:file:Happy100BE/.env.local[.properties]

---
spring:
  config:
    activate:
      on-profile: common
  mybatis:
    mapper-locations: classpath:/mappers/**/*.xml
    # 실제 엔티티 패키지 경로로 보정 (별칭을 사용하지 않더라도 일치시켜 둠)
    type-aliases-package: com.Happy100BE.**.entity
    configuration:
      map-underscore-to-camel-case: true
  main:
    allow-bean-definition-overriding: true

app:
  attachments:
    base-path: ${ATTACHMENT_BASE_PATH:./uploads}
  contact:
    # 상담 메일 수신자. 기본값은 메일 발신 계정(MAIL_USERNAME)을 사용합니다.
    recipient-email: ${MAIL_RECIPIENT_EMAIL:}
  cors:
    allowed-origins: ${APP_CORS_ALLOWED_ORIGINS:http://localhost:5173,http://127.0.0.1:5173}
  search:
    use-fulltext: ${APP_SEARCH_USE_FULLTEXT:true}
  security:
    # 기본 프로필(공통)에서도 환경변수로 HTTPS 강제/해제를 제어할 수 있도록 기본 키 노출
    hsts:
      enabled: ${APP_SECURITY_HSTS_ENABLED:false}
      max-age: ${APP_SECURITY_HSTS_MAX_AGE:0}
    force-https:
      enabled: ${APP_SECURITY_FORCE_HTTPS_ENABLED:false}

jwt:
  cookie:
    # 로컬 개발 기본값: HttpOnly, Secure=false, SameSite=Lax
    name: ${JWT_COOKIE_NAME:access_token}
    path: ${JWT_COOKIE_PATH:/}
    domain: ${JWT_COOKIE_DOMAIN:}
    http-only: ${JWT_COOKIE_HTTP_ONLY:true}
    secure: ${JWT_COOKIE_SECURE:false}
    same-site: ${JWT_COOKIE_SAME_SITE:Lax}

server:
  port: 8080
  # 프록시/로드밸런서의 X-Forwarded-* 헤더를 신뢰해 HTTPS 리다이렉트/링크 생성 시 원본 스킴을 반영
  forward-headers-strategy: framework

logging:
  level:
    # 기본값은 운영 친화적으로 INFO
    com.Happy100BE.Happy100: INFO
    org.springframework.security: INFO

---
spring:
  config:
    activate:
      on-profile: local_server
  datasource:
    url: ${DB_URL:jdbc:mysql://183.111.138.247:3306/sungjinglobal25?useSSL=false&serverTimezone=Asia/Seoul&characterEncoding=UTF-8&allowPublicKeyRetrieval=true}
    username: ${DB_USERNAME:sungjinglobal25}
    password: ${DB_PASSWORD:}
    driver-class-name: com.mysql.cj.jdbc.Driver
    hikari:
      read-only: false
logging:
  level:
    # 로컬 개발 시 상세 로그
    com.Happy100BE.Happy100: DEBUG
    org.springframework.security: INFO
react:
  server:
    protocol: ${REACT_SERVER_PROTOCOL:http}
    host: ${REACT_SERVER_HOST:localhost}
    port: ${REACT_SERVER_PORT:5173}
    callback-path: ${REACT_SERVER_CALLBACK_PATH:/oauth2/callback}
    failure-path: ${REACT_SERVER_FAILURE_PATH:/oauth2/callback}

---
spring:
  config:
    activate:
      on-profile: prod_server
  datasource:
    url: ${DB_URL}
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
    driver-class-name: com.mysql.cj.jdbc.Driver
    hikari:
      read-only: false
server:
  forward-headers-strategy: framework
  port: ${SERVER_PORT:8080}
app:
  cors:
    allowed-origins: ${APP_CORS_ALLOWED_ORIGINS:https://행복백세.com,https://xn--3h3b1nt9hlw0a.com}
  security:
    hsts:
      # 브라우저가 HTTP를 자동으로 HTTPS로 올리는 HSTS를 임시 비활성화(문제 진단 목적)
      enabled: ${APP_SECURITY_HSTS_ENABLED:false}
      max-age: ${APP_SECURITY_HSTS_MAX_AGE:0}
    force-https:
      # 프록시(OpenResty)에서 X-Forwarded-Proto 헤더를 전달하지 못하는 환경에서는
      # Spring Security의 HTTPS 강제가 무한 리다이렉트를 유발할 수 있음.
      # 운영 호스팅에서 프록시 설정 제어가 불가하므로 기본값을 비활성화합니다.
      enabled: ${APP_SECURITY_FORCE_HTTPS_ENABLED:false}
react:
  server:
    protocol: ${REACT_SERVER_PROTOCOL:https}
    host: ${REACT_SERVER_HOST:xn--3h3b1nt9hlw0a.com}
    port: ${REACT_SERVER_PORT:443}
    callback-path: ${REACT_SERVER_CALLBACK_PATH:/oauth2/callback}
    failure-path: ${REACT_SERVER_FAILURE_PATH:/oauth2/callback}
jwt:
  cookie:
    secure: ${JWT_COOKIE_SECURE:true}
    same-site: ${JWT_COOKIE_SAME_SITE:Lax}
    domain: ${JWT_COOKIE_DOMAIN:xn--3h3b1nt9hlw0a.com}

---
spring:
  config:
    activate:
      on-profile: secret
jwt:
  secret: ${JWT_SECRET}
  issuer: ${JWT_ISSUER:happy100-auth}
  access-token-validity-seconds: ${JWT_ACCESS_TOKEN_VALIDITY_SECONDS:3600}

---
spring:
  config:
    activate:
      on-profile: common
  mail:
    host: ${MAIL_HOST:smtp.naver.com}
    port: ${MAIL_PORT:587}
    username: ${MAIL_USERNAME}
    password: ${MAIL_PASSWORD}
    default-encoding: UTF-8
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
          connectiontimeout: ${MAIL_CONNECTION_TIMEOUT:5000}
          timeout: ${MAIL_READ_TIMEOUT:5000}
          writetimeout: ${MAIL_WRITE_TIMEOUT:5000}

---

spring:
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${OAUTH_GOOGLE_CLIENT_ID}
            client-secret: ${OAUTH_GOOGLE_CLIENT_SECRET}
            scope: openid, profile, email
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
            client-authentication-method: client_secret_basic
            authorization-grant-type: authorization_code
          naver:
            client-id: ${OAUTH_NAVER_CLIENT_ID}
            client-secret: ${OAUTH_NAVER_CLIENT_SECRET}
            scope: name, email
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
            client-authentication-method: client_secret_post
            authorization-grant-type: authorization_code
            client-name: Naver
          kakao:
            client-id: ${OAUTH_KAKAO_CLIENT_ID}
            client-secret: ${OAUTH_KAKAO_CLIENT_SECRET:}
            scope: profile_nickname, account_email
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
            client-authentication-method: client_secret_post
            authorization-grant-type: authorization_code
            client-name: Kakao
        provider:
          google:
            authorization-uri: https://accounts.google.com/o/oauth2/v2/auth
            token-uri: https://oauth2.googleapis.com/token
            user-info-uri: https://openidconnect.googleapis.com/v1/userinfo
            user-name-attribute: sub
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id
